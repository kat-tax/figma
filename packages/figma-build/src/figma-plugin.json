{
  "title": "Figma Plugin JSON Schema",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "https://raw.githubusercontent.com/kat-tax/figma-to-react-native/master/packages/figma-build/src/figma-plugin.json",
  "type": "object",
  "definitions": {
    "FileMain": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": ["src", "handler"],
          "additionalProperties": false,
          "properties": {
            "src": {
              "description": "(required)\nPath to the main entry point.",
              "type": "string"
            },
            "handler": {
              "description": "(required)\nThe name of the exported function in the file.",
              "type": "string"
            }
          }
        }
      ]
    },
    "FileUI": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": ["src", "handler"],
          "additionalProperties": false,
          "properties": {
            "src": {
              "description": "(required)\nPath to the UI implementation of the plugin command.",
              "type": "string"
            },
            "handler": {
              "description": "(required)\nThe name of the exported function in the file.",
              "type": "string"
            }
          }
        }
      ]
    },
    "Parameter": {
      "type": "object",
      "required": ["key"],
      "additionalProperties": false,
      "properties": {
        "key": {
          "description": "(required)\nThe unique key used to identify the parameter.",
          "type": "string"
        },
        "name": {
          "description": "(optional)\nThe name of the parameter shown in the Quick Actions search bar. Defaults to the value of the sibling \"key\" key.",
          "type": "string"
        },
        "description": {
          "description": "(optional)\nThe description for the parameter shown in the Quick Actions search bar.",
          "type": "string"
        },
        "allowFreeform": {
          "description": "(optional)\nSet to `true` to allow any value to be entered for the parameter, not just the values suggested by the plugin command.",
          "type": "boolean"
        },
        "optional": {
          "description": "(optional)\nSet to `true` to make the parameter optional. Optional parameters can only occur at the end of the list of parameters. There must be at least one non-optional parameter.",
          "type": "boolean"
        }
      }
    },
    "MenuItem": {
      "oneOf": [
        {
          "description": "A separator between plugins commands in the menu.",
          "type": "string",
          "pattern": "^-$"
        },
        {
          "description": "A plugin command.",
          "type": "object",
          "required": ["name"],
          "additionalProperties": false,
          "dependencies": {
            "ui": ["main"]
          },
          "properties": {
            "name": {
              "description": "(required)\nThe name of the plugin command.",
              "type": "string"
            },
            "main": {
              "description": "(required, unless \"menu\" is specified)\nPath to the main entry point of the plugin command. The main entry point must be the function set as the `default` export of the file. To use a particular named export instead, specify an object with \"src\" (required) and \"handler\" (required) keys.",
              "$ref": "#/definitions/FileMain"
            },
            "ui": {
              "description": "(optional)\nPath to the UI implementation of the plugin command (as specified via the sibling \"main\" key). The UI implementation must be the function set as the `default` export of the file. To use a particular named export instead, specify an object with \"src\" (required) and \"handler\" (required) keys.",
              "$ref": "#/definitions/FileUI"
            },
            "parameters": {
              "description": "(optional)\nDefines the list of parameters that the plugin command accepts via Figma’s Quick Actions search bar.",
              "type": "array",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Parameter"
              }
            },
            "parameterOnly": {
              "description": "(optional)\nWhen \"parameters\" is specified, the default behavior is that the user will be required to input parameters via Figma’s Quick Actions search bar. Set \"parameterOnly\" to `false` to make parameter input optional.",
              "type": "boolean"
            },
            "menu": {
              "description": "(required, unless \"main\" is specified)\nSub-menus can be nested.",
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/definitions/MenuItem"
              }
            }
          }
        }
      ]
    }
  },
  "properties": {
    "figma-plugin": {
      "type": "object",
      "required": ["id", "name"],
      "additionalProperties": false,
      "dependencies": {
        "ui": ["main"]
      },
      "properties": {
        "api": {
          "description": "(optional)\nThe version of the Figma/FigJam plugin API to use. Defaults to \"1.0.0\".",
          "type": "string"
        },
        "widgetApi": {
          "description": "(optional)\nThe version of the FigJam widget API to use. Defaults to \"1.0.0\".",
          "type": "string"
        },
        "editorType": {
          "description": "(optional)\nFor specifying the editor(s) that the plugin/widget is intended for. Possible editor types are \"figma\", \"figjam\" and \"dev\". Defaults to [\"figma\"]. The value [\"figjam\", \"dev\"] is currently not supported.",
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": ["dev", "figjam", "figma"]
          }
        },
        "documentAccess": {
          "description": "(optional)\nHow to access the document. Set to \"dynamic-page\" to load pages dynamically.",
          "type": "string",
          "enum": ["dynamic-page"]
        },
        "containsWidget": {
          "description": "(optional)\nThis field must be set to `true` for a FigJam widget. Defaults to `false`.",
          "type": "boolean"
        },
        "id": {
          "description": "(required to publish the plugin/widget on Figma Community)\nThe plugin/widget ID. This field can be omitted during development but is required if you want to publish your plugin/widget. Figma will generate a unique ID for you when you first try to publish your plugin/widget; copy and paste that ID here.",
          "type": "string"
        },
        "name": {
          "description": "(required)\nThe name of the plugin/widget.",
          "type": "string"
        },
        "main": {
          "description": "(required, unless \"menu\" is specified)\nPath to the main entry point of the plugin command or widget. The main entry point must be the function set as the `default` export of the file. To use a particular named export instead, specify an object with \"src\" (required) and \"handler\" (required) keys.",
          "$ref": "#/definitions/FileMain"
        },
        "ui": {
          "description": "(optional)\nPath to the UI implementation of the plugin command or widget (as specified via the sibling \"main\" key). The UI implementation must be the function set as the `default` export of the file. To use a particular named export instead, specify an object with \"src\" (required) and \"handler\" (required) keys.",
          "$ref": "#/definitions/FileUI"
        },
        "menu": {
          "description": "(required, unless \"main\" is specified)\nAn array that specifies the commands shown in the plugin’s sub-menu. Each object in the array has the keys \"name\" (required), \"main\" (required, unless \"main\" is specified), \"ui\" (optional), \"parameters\" (optional), \"parameterOnly\" (optional), and \"menu\" (optional). Use a \"-\" in the array to specify a separator between commands in the sub-menu.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/MenuItem"
          }
        },
        "parameters": {
          "description": "(optional)\nDefines the list of parameters that the plugin command accepts via Figma’s Quick Actions search bar.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "parameterOnly": {
          "description": "(optional)\nWhen \"parameters\" is specified, the default behavior is that the user will be required to input parameters via Figma’s Quick Actions search bar. Set \"parameterOnly\" to `false` to make parameter input optional.",
          "type": "boolean"
        },
        "relaunchButtons": {
          "description": "(optional)\nAn object that specifies the commands that can be set as relaunch buttons. Each key is a `relaunchButtonId`. Each value specifies the relaunch button command, and is an object with the keys \"name\" (required), \"main\" (required), \"ui\" (optional), and \"multipleSelection\" (optional).",
          "additionalProperties": {
            "type": "object",
            "required": ["name", "main"],
            "dependencies": {
              "ui": ["main"]
            },
            "properties": {
              "name": {
                "type": "string",
                "description": "(required)\nThe name of the relaunch button."
              },
              "main": {
                "$ref": "#/definitions/FileMain",
                "description": "(required, unless \"menu\" is specified)\nPath to the main entry point of the plugin command. The main entry point must be the function set as the `default` export of the file. To use a particular named export instead, specify an object with \"src\" (required) and \"handler\" (required) keys."
              },
              "ui": {
                "$ref": "#/definitions/FileUI",
                "description": "(optional)\nPath to the UI implementation of the plugin command (as specified via the sibling \"main\" key). The UI implementation must be the function set as the `default` export of the file. To use a particular named export instead, specify an object with \"src\" (required) and \"handler\" (required) keys."
              },
              "multipleSelection": {
                "type": "boolean",
                "description": "(optional)\nWhether the relaunch button should appear when multiple layers are selected."
              }
            }
          }
        },
        "capabilities": {
          "description": "(optional)\nFor specifying the capabilities that the plugin needs access to. Possible capabilities are \"codegen\", \"inspect\", \"vscode\", and \"textreview\".",
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": ["codegen", "inspect", "vscode", "textreview"]
          }
        },
        "permissions": {
          "description": "(optional)\nFor specifying the permissions that the plugin/widget needs access to. Possible permissions are \"activeusers\", \"currentuser\", \"fileusers\", \"payments\" and \"teamlibrary\".",
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "activeusers",
              "currentuser",
              "fileusers",
              "payments",
              "teamlibrary"
            ]
          }
        },
        "networkAccess": {
          "description": "(optional)\nAn object that specifies the list of domains that your plugin/widget is permitted to access. Keys are \"allowedDomains\" (required), \"reasoning\" (optional), and \"devAllowedDomains\" (optional).",
          "type": "object",
          "required": ["allowedDomains"],
          "additionalProperties": false,
          "properties": {
            "allowedDomains": {
              "description": "(required)\nMatch patterns for domains that your plugin/widget is permitted to access.",
              "type": "array",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "reasoning": {
              "description": "(optional)\nFor specifying why your plugin/widgets needs to access the domains in \"allowedDomains\".",
              "type": "string"
            },
            "devAllowedDomains": {
              "description": "(optional)\nMatch patterns for domains that your plugin/widget is permitted to access during development.",
              "type": "array",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        },
        "enablePrivatePluginApi": {
          "description": "(optional)\nSet to `true` to allow the use of plugin APIs that are only available to private plugins/widgets.",
          "type": "boolean"
        },
        "enableProposedApi": {
          "description": "(optional)\nSet to `true` to allow the use of Proposed APIs that are only available during development.",
          "type": "boolean"
        }
      }
    }
  }
}
